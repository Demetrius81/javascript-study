"use strict";
//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.16.0.0 (NJsonSchema v10.7.1.0 (Newtonsoft.Json v11.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.PetAccountClient = void 0;
/* tslint:disable */
/* eslint-disable */
// ReSharper disable InconsistentNaming
var PetAccountClient;
(function (PetAccountClient) {
    var PetAccount;
    (function (PetAccount) {
        var Client = /** @class */ (function () {
            function Client(baseUrl, http) {
                this.jsonParseReviver = undefined;
                this.http = http ? http : window;
                this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
            }
            /**
             * @return Success
             */
            Client.prototype.getall = function () {
                var _this = this;
                var url_ = this.baseUrl + "/api/Pets/getall";
                url_ = url_.replace(/[?&]$/, "");
                var options_ = {
                    method: "GET",
                    headers: {}
                };
                return this.http.fetch(url_, options_).then(function (_response) {
                    return _this.processGetall(_response);
                });
            };
            Client.prototype.processGetall = function (response) {
                var status = response.status;
                var _headers = {};
                if (response.headers && response.headers.forEach) {
                    response.headers.forEach(function (v, k) { return _headers[k] = v; });
                }
                ;
                if (status === 200) {
                    return response.text().then(function (_responseText) {
                        return;
                    });
                }
                else if (status !== 200 && status !== 204) {
                    return response.text().then(function (_responseText) {
                        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
                    });
                }
                return Promise.resolve(null);
            };
            /**
             * @param id (optional)
             * @return Success
             */
            Client.prototype.getbyid = function (id) {
                var _this = this;
                var url_ = this.baseUrl + "/api/Pets/getbyid?";
                if (id === null)
                    throw new Error("The parameter 'id' cannot be null.");
                else if (id !== undefined)
                    url_ += "id=" + encodeURIComponent("" + id) + "&";
                url_ = url_.replace(/[?&]$/, "");
                var options_ = {
                    method: "GET",
                    headers: {}
                };
                return this.http.fetch(url_, options_).then(function (_response) {
                    return _this.processGetbyid(_response);
                });
            };
            Client.prototype.processGetbyid = function (response) {
                var status = response.status;
                var _headers = {};
                if (response.headers && response.headers.forEach) {
                    response.headers.forEach(function (v, k) { return _headers[k] = v; });
                }
                ;
                if (status === 200) {
                    return response.text().then(function (_responseText) {
                        return;
                    });
                }
                else if (status !== 200 && status !== 204) {
                    return response.text().then(function (_responseText) {
                        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
                    });
                }
                return Promise.resolve(null);
            };
            /**
             * @param body (optional)
             * @return Success
             */
            Client.prototype.add = function (body) {
                var _this = this;
                var url_ = this.baseUrl + "/api/Pets/add";
                url_ = url_.replace(/[?&]$/, "");
                var content_ = JSON.stringify(body);
                var options_ = {
                    body: content_,
                    method: "PUT",
                    headers: {
                        "Content-Type": "application/json",
                    }
                };
                return this.http.fetch(url_, options_).then(function (_response) {
                    return _this.processAdd(_response);
                });
            };
            Client.prototype.processAdd = function (response) {
                var status = response.status;
                var _headers = {};
                if (response.headers && response.headers.forEach) {
                    response.headers.forEach(function (v, k) { return _headers[k] = v; });
                }
                ;
                if (status === 200) {
                    return response.text().then(function (_responseText) {
                        return;
                    });
                }
                else if (status !== 200 && status !== 204) {
                    return response.text().then(function (_responseText) {
                        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
                    });
                }
                return Promise.resolve(null);
            };
            /**
             * @return Success
             */
            Client.prototype.count = function () {
                var _this = this;
                var url_ = this.baseUrl + "/api/Pets/count";
                url_ = url_.replace(/[?&]$/, "");
                var options_ = {
                    method: "GET",
                    headers: {}
                };
                return this.http.fetch(url_, options_).then(function (_response) {
                    return _this.processCount(_response);
                });
            };
            Client.prototype.processCount = function (response) {
                var status = response.status;
                var _headers = {};
                if (response.headers && response.headers.forEach) {
                    response.headers.forEach(function (v, k) { return _headers[k] = v; });
                }
                ;
                if (status === 200) {
                    return response.text().then(function (_responseText) {
                        return;
                    });
                }
                else if (status !== 200 && status !== 204) {
                    return response.text().then(function (_responseText) {
                        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
                    });
                }
                return Promise.resolve(null);
            };
            /**
             * @param body (optional)
             * @return Success
             */
            Client.prototype.delete = function (body) {
                var _this = this;
                var url_ = this.baseUrl + "/api/Pets/delete";
                url_ = url_.replace(/[?&]$/, "");
                var content_ = JSON.stringify(body);
                var options_ = {
                    body: content_,
                    method: "POST",
                    headers: {
                        "Content-Type": "application/json",
                    }
                };
                return this.http.fetch(url_, options_).then(function (_response) {
                    return _this.processDelete(_response);
                });
            };
            Client.prototype.processDelete = function (response) {
                var status = response.status;
                var _headers = {};
                if (response.headers && response.headers.forEach) {
                    response.headers.forEach(function (v, k) { return _headers[k] = v; });
                }
                ;
                if (status === 200) {
                    return response.text().then(function (_responseText) {
                        return;
                    });
                }
                else if (status !== 200 && status !== 204) {
                    return response.text().then(function (_responseText) {
                        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
                    });
                }
                return Promise.resolve(null);
            };
            /**
             * @param body (optional)
             * @return Success
             */
            Client.prototype.update = function (body) {
                var _this = this;
                var url_ = this.baseUrl + "/api/Pets/update";
                url_ = url_.replace(/[?&]$/, "");
                var content_ = JSON.stringify(body);
                var options_ = {
                    body: content_,
                    method: "POST",
                    headers: {
                        "Content-Type": "application/json",
                    }
                };
                return this.http.fetch(url_, options_).then(function (_response) {
                    return _this.processUpdate(_response);
                });
            };
            Client.prototype.processUpdate = function (response) {
                var status = response.status;
                var _headers = {};
                if (response.headers && response.headers.forEach) {
                    response.headers.forEach(function (v, k) { return _headers[k] = v; });
                }
                ;
                if (status === 200) {
                    return response.text().then(function (_responseText) {
                        return;
                    });
                }
                else if (status !== 200 && status !== 204) {
                    return response.text().then(function (_responseText) {
                        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
                    });
                }
                return Promise.resolve(null);
            };
            return Client;
        }());
        PetAccount.Client = Client;
        var Pet = /** @class */ (function () {
            function Pet(data) {
                if (data) {
                    for (var property in data) {
                        if (data.hasOwnProperty(property))
                            this[property] = data[property];
                    }
                }
            }
            Pet.prototype.init = function (_data) {
                if (_data) {
                    this.id = _data["id"];
                    this.kindOfAnimal = _data["kindOfAnimal"];
                    this.count = _data["count"];
                    this.isPackAnimal = _data["isPackAnimal"];
                }
            };
            Pet.fromJS = function (data) {
                data = typeof data === 'object' ? data : {};
                var result = new Pet();
                result.init(data);
                return result;
            };
            Pet.prototype.toJSON = function (data) {
                data = typeof data === 'object' ? data : {};
                data["id"] = this.id;
                data["kindOfAnimal"] = this.kindOfAnimal;
                data["count"] = this.count;
                data["isPackAnimal"] = this.isPackAnimal;
                return data;
            };
            return Pet;
        }());
        PetAccount.Pet = Pet;
        var ApiException = /** @class */ (function (_super) {
            __extends(ApiException, _super);
            function ApiException(message, status, response, headers, result) {
                var _this = _super.call(this) || this;
                _this.isApiException = true;
                _this.message = message;
                _this.status = status;
                _this.response = response;
                _this.headers = headers;
                _this.result = result;
                return _this;
            }
            ApiException.isApiException = function (obj) {
                return obj.isApiException === true;
            };
            return ApiException;
        }(Error));
        PetAccount.ApiException = ApiException;
        function throwException(message, status, response, headers, result) {
            if (result !== null && result !== undefined)
                throw result;
            else
                throw new ApiException(message, status, response, headers, null);
        }
    })(PetAccount || (PetAccount = {}));
})(PetAccountClient = exports.PetAccountClient || (exports.PetAccountClient = {}));
